<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * Copyright (C) 2016 The Android Open-Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
	<!-- Hardware keys present on the device, stored as a bit field.
		 This integer should equal the sum of the corresponding value for each
		 of the following keys present:
			 1 - Home
			 2 - Back
			 4 - Menu
			 8 - Assistant (search)
			16 - App switch
			32 - Camera
			64 - Volume rocker
		 For example, a device with Home, Back and Menu keys would set this
		 config to 7. -->
	<integer name="config_deviceHardwareKeys">83</integer>

	<!-- Hardware keys present on the device with the ability to wake, stored as a bit field.
		 This integer should equal the sum of the corresponding value for each
		 of the following keys present:
			 1 - Home
			 2 - Back
			 4 - Menu
			 8 - Assistant (search)
			16 - App switch
			32 - Camera
			64 - Volume rocker
		 For example, a device with Home, Back and Menu keys would set this
		 config to 7. -->
	<integer name="config_deviceHardwareWakeKeys">83</integer>

	<!-- Boolean indicating whether the wifi chipset has dual frequency band support -->
	<bool name="config_wifi_dual_band_support">false</bool>

	<!-- Boolean indicating whether the wifi chipset supports background scanning mechanism.
		 This mechanism allows the host to remain in suspend state and the dongle to actively
		 scan and wake the host when a configured SSID is detected by the dongle. This chipset
		 capability can provide power savings when wifi needs to be always kept on. -->
	<bool name="config_wifi_background_scan_support">true</bool>

	<!-- Indicate whether closing the lid causes the device to go to sleep and opening
		 it causes the device to wake up.
		 The default is false. -->
	<bool name="config_lidControlsSleep">true</bool>

	<!-- This string array should be overridden by the device to present a list of network
		 attributes.  This is used by the connectivity manager to decide which networks can coexist
		 based on the hardware -->
	<!-- An Array of "[Connection name],[ConnectivityManager.TYPE_xxxx],
		 [associated radio-type],[priority],[restoral-timer(ms)],[dependencyMet]  -->
	<!-- the 5th element "resore-time" indicates the number of milliseconds to delay
		 before automatically restore the default connection.  Set -1 if the connection
		 does not require auto-restore. -->
	<!-- the 6th element indicates boot-time dependency-met value. -->
	<string-array name="networkAttributes">
		<item>wifi,1,1,1,-1,true</item>
		<item>mobile,0,0,0,-1,true</item>
		<item>mobile_mms,2,0,2,60000,true</item>
		<item>mobile_supl,3,0,2,60000,true</item>
		<item>mobile_dun,4,0,3,60000,true</item>
		<item>mobile_hipri,5,0,3,60000,true</item>
		<item>mobile_fota,10,0,2,60000,true</item>
		<item>mobile_ims,11,0,2,60000,true</item>
		<item>mobile_cbs,12,0,2,60000,true</item>
		<item>wifi_p2p,13,1,0,-1,true</item>
		<item>bluetooth,7,7,1,-1,true</item>
		<item>mobile_ia,14,0,2,-1,true</item>
		<item>mobile_emergency,15,0,2,-1,true</item>
	</string-array>

	<!-- Integer indicating wpa_supplicant scan interval in milliseconds -->
	<integer name="config_wifi_supplicant_scan_interval">40000</integer>

	<!-- Integer indicating wpa_supplicant scan interval when p2p is connected in milliseconds -->
	<integer name="config_wifi_scan_interval_p2p_connected">3600000</integer>

	<!-- List of regexpressions describing the interface (if any) that represent tetherable
		 USB interfaces.  If the device doesn't want to support tething over USB this should
		 be empty.  An example would be "usb.*" -->
	<string-array name="config_tether_usb_regexs">
		<item>rndis0</item>
	</string-array>

	<!-- List of regexpressions describing the interface (if any) that represent tetherable
		 Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
		 should be empty.  An example would be "softap.*" -->
	<string-array name="config_tether_wifi_regexs">
		<item>wlan\\d</item>
	</string-array>

	<!-- List of regexpressions describing the interface (if any) that represent tetherable
		 bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
		 should be empty. -->
	<string-array name="config_tether_bluetooth_regexs">
		<item>bt-pan</item>
	</string-array>

	<!-- Configure mobile network MTU. The standard default is set here but each carrier
		 may have a specific value set in an overlay config.xml file. -->
	<integer name="config_mobile_mtu">1358</integer>

	<!-- Configure mobile tcp buffer sizes in the form:
		 rat-name:rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max
		 If no value is found for the rat-name in use, the system default will be applied.
	-->
	<string-array name="config_mobile_tcp_buffers">
		<item>gprs:4092,8760,65536,4096,8760,65536</item>
		<item>edge:4093,26280,110208,4096,16384,110208</item>
		<item>hspap:32768,262144,1048576,4096,16384,262144</item>
		<item>lte:655360,1310720,2621440,327680,655360,1310720</item>
	</string-array>

	<string-array name="config_serialPorts">
		<item>/dev/gsmtty19</item>
		<item>/dev/gsmtty83</item>
	</string-array>

	<!-- Flag indicating whether the we should enable the automatic brightness in Settings.
		 Software implementation will be used if config_hardware_auto_brightness_available is not set -->
	<bool name="config_automatic_brightness_available">true</bool>

	<!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
		 The N entries of this array define N + 1 control points as follows:
		 (1-based arrays)

		 Point 1:            (0, value[1]):             lux <= 0
		 Point 2:     (level[1], value[2]):  0        < lux <= level[1]
		 Point 3:     (level[2], value[3]):  level[2] < lux <= level[3]
		 ...
		 Point N+1: (level[N], value[N+1]):  level[N] < lux

		 The control points must be strictly increasing.  Each control point
		 corresponds to an entry in the brightness backlight values arrays.
		 For example, if LUX == level[1] (first element of the levels array)
		 then the brightness will be determined by value[2] (second element
		 of the brightness values array).

		 Spline interpolation is used to determine the auto-brightness
		 backlight values for LUX levels between these control points.

		 Must be overridden in platform specific overlays -->
	<integer-array name="config_autoBrightnessLevels">
		<item>30</item>
		<item>50</item>
		<item>100</item>
		<item>200</item>
		<item>300</item>
		<item>400</item>
		<item>500</item>
		<item>650</item>
		<item>800</item>
		<item>1000</item>
		<item>1500</item>
		<item>2000</item>
		<item>3000</item>
		<item>4000</item>
		<item>5000</item>
		<item>7000</item>
		<item>10000</item>
		<item>12500</item>
		<item>15000</item>
		<item>17500</item>
		<item>20000</item>
	</integer-array>

	<!-- Array of output values for LCD backlight corresponding to the LUX values
		 in the config_autoBrightnessLevels array.  This array should have size one greater
		 than the size of the config_autoBrightnessLevels array.
		 The brightness values must be between 0 and 255 and be non-decreasing.
		 This must be overridden in platform specific overlays -->
	<integer-array name="config_autoBrightnessLcdBacklightValues">
		<item>34</item>
		<item>51</item>
		<item>66</item>
		<item>80</item>
		<item>92</item>
		<item>104</item>
		<item>117</item>
		<item>126</item>
		<item>162</item>
		<item>187</item>
		<item>207</item>
		<item>216</item>
		<item>220</item>
		<item>223</item>
		<item>227</item>
		<item>283</item>
		<item>340</item>
		<item>397</item>
		<item>453</item>
	</integer-array>

	<!-- Array of output values for button backlight corresponding to the LUX values
		 in the config_autoBrightnessLevels array.  This array should have size one greater
		 than the size of the config_autoBrightnessLevels array.
		 The brightness values must be between 0 and 255 and be non-decreasing.
		 This must be overridden in platform specific overlays -->
	<integer-array name="config_autoBrightnessButtonBacklightValues">
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
	</integer-array>

	<!-- Array of output values for keyboard backlight corresponding to the LUX values
		 in the config_autoBrightnessLevels array.  This array should have size one greater
		 than the size of the config_autoBrightnessLevels array.
		 The brightness values must be between 0 and 255 and be non-decreasing.
		 This must be overridden in platform specific overlays -->
	<integer-array name="config_autoBrightnessKeyboardBacklightValues">
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
		<item>0</item>
	</integer-array>

	<!-- Is the battery LED intrusive? Used to decide if there should be a disable option -->
	<bool name="config_intrusiveBatteryLed">true</bool>

	<!-- Whether UI for multi user should be shown -->
	<bool name="config_enableMultiUserUI">true</bool>

	<!--  Maximum number of supported users -->
	<integer name="config_multiuserMaximumUsers">5</integer>

	<!-- Whether WiFi display is supported by this device.
		 There are many prerequisites for this feature to work correctly.
		 Here are a few of them:
		 * The WiFi radio must support WiFi P2P.
		 * The WiFi radio must support concurrent connections to the WiFi display and
		   to an access point.
		 * The Audio Flinger audio_policy.conf file must specify a rule for the "r_submix"
		   remote submix module.  This module is used to record and stream system
		   audio output to the WiFi display encoder in the media server.
		 * The remote submix module "audio.r_submix.default" must be installed on the device.
		 * The device must be provisioned with HDCP keys (for protected content).
	-->
	<bool name="config_enableWifiDisplay">true</bool>

	<!-- Set to true if the wifi display supports compositing content stored
		 in gralloc protected buffers.  For this to be true, there must exist
		 a protected hardware path for surface flinger to composite and send
		 protected buffers to the wifi display video encoder.

		 If this flag is false, we advise applications not to use protected
		 buffers (if possible) when presenting content to a wifi display because
		 the content may be blanked.

		 This flag controls whether the {@link Display#FLAG_SUPPORTS_PROTECTED_BUFFERS}
		 flag is set for wifi displays.
	-->
	<bool name="config_wifiDisplaySupportsProtectedBuffers">true</bool>

	<!-- Indicate whether the SD card is accessible without removing the battery. -->
	<bool name="config_batterySdCardAccessibility">true</bool>

	<!-- When true use the linux /dev/input/event subsystem to detect the switch changes
		 on the headphone/microphone jack. When false use the older uevent framework. -->
	<bool name="config_useDevInputEventForAudioJack">true</bool>

	<!-- Is the device capable of hot swapping an UICC Card -->
	<bool name="config_hotswapCapable">true</bool>

	<bool name="config_auto_attach_data_on_creation">false</bool>

	<!-- Enable the option to check proximity sensor when deciding whether to
		 turn the screen on
		 NOTE ! - Enable for devices that have a fast response proximity sensor
	-->
	<bool name="config_proximityCheckOnWake">true</bool>
	<integer name="config_proximityCheckTimeout">100</integer>
	<bool name="config_proximityCheckOnWakeEnabledByDefault">false</bool>

	<!-- Disables Button backlight settings -->
	<integer name="config_buttonBrightnessSettingDefault">0</integer>

	<!-- Performance profiles -->
	<string name="config_perf_profile_prop">sys.perf.profile</string>
	<string name="config_perf_profile_default_entry">1</string>

	<!-- We don't have a menu key -->
	<integer name="config_overrideHasPermanentMenuKey">2</integer>

	<!-- Disable DayDreams by default -->
	<bool name="config_dreamsEnabledByDefault">false</bool>

	<!-- Prebuilt WebView -->
	<string name="config_webViewPackageName">com.google.android.webview</string>

	<!-- If this is true, the screen will come on when you unplug usb/power/whatever. -->
	<bool name="config_unplugTurnsOnScreen">false</bool>

	<!-- Ambient Display - disabled by dgadelha -->
	<string name="config_dozeComponent" />
	<bool name="config_dozeAfterScreenOff">false</bool>

	<!-- Is the battery LED intrusive? Used to decide if there should be a disable option -->
	<bool name="config_intrusiveNotificationLed">true</bool>
</resources>